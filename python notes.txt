Binary numbers are represented as follow: 4 = 0b100 #first two letters will be 0b
• The bin function can be used to create a binary String from an integer
• Example;
>>> x=bin(128)
>>> x
‘0b10000000'
• What happens for negative numbers?
>>> x=bin(-128)
>>> x
'-0b10000000'
• Clearly that is not correct…we need 9 bits to capture the sign bit
# if you want to convert a positive number to binary use bin() function
# if you want an ascii of any character use ord() function which stands for ordinal
# if you want character from the ascii number use chr() function
# To know if all the characters present in a string are alphanumeric i.e. they 
  are alphabets and numeric, use the isalnum() function


----------------------------------------------------------------------------------------------------------------------------------------
Sorting:
You cannot sort a set or dictionary
There are two ways for sorting, either the .sort() method or the sorted() function
# here list.sort() does a deep copy whilst sorted(listExample) does a shallow copy hence the result should be stored in new list
Example:
listExample = [2,45,2,14,6]
list.sort() OR newList = sorted(listExample)
 
if you want to use comparator function for customized sorting, the following helps
lst = [('candy','30','100'), ('apple','10','200'), ('baby','20','300')]
lst.sort(key=lambda x:x[1])	
# here the key attribute is important and we pass a lamba function in the key attribute which selects 
the second element from the elements upon which sorting will take place.

# another way is the sorted function, example:
ids = ['id1', 'id100', 'id2', 'id22', 'id3', 'id30']
sorted_ids = sorted(ids, key=lambda x: int(x[2:])) # Integer sort
result will be ['id1', 'id2', 'id3', 'id22', 'id30', 'id100'] 

-----------------------------------------------------------------------------------------------------------------------------------------

float('inf')
float('-inf')

-----------------------------------------------------------------------------------------------------------------------------------------

string methods:
.lower()
.upper()
protip: dont work with strings, convert strings to lists using list(stringname)
to convert list to string use ''.join(listName) #essentially joining list to an empty string converts it

-----------------------------------------------------------------------------------------------------------------------------------------

type(obj)
isinstance(obj, datatype)
isinstance(obj, (datatype1, datatype2, datatype3....)) 	# is obj any of the datatypes

-----------------------------------------------------------------------------------------------------------------------------------------

nums = [2,3,5,'eat', 'sleep']

enumerate(nums) will return (0, 2) , (1, 3) , (2, 5) , (3, 'eat') , (4, 'sleep')
enumerate(nums, start) will start the count from start instead of 0
for i, num in enumerate(nums): 	# can be used like this

-----------------------------------------------------------------------------------------------------------------------------------------

Lambda Functions:
Signature is lambda args : expression
Can have an optional label giving signature: label = lamda args : expression
print((lambda x: x**2)(10))
100
sq = lambda x: x**2
print(sq(10))

-----------------------------------------------------------------------------------------------------------------------------------------

map function:
General map signature: map(function, sequence)
n, m = map(int, input().split(' '))
# here we have an input: 3 5 
# n = 3, m = 5
to store a list of input as integers
tempList = []
tempList += map(int, input().split(' '))

we can also convert a map object to list like this print(list(map(int,inputList)))

-----------------------------------------------------------------------------------------------------------------------------------------

format strings in these way
way 1:
x = 3
y = f'this is the value of x: {x}'
y will store 'this is the value of x: 3'

way 2:
x = 3
y = 'this is the value of x: {}'.format(x)
y will store 'this is the value of x: 3'

-----------------------------------------------------------------------------------------------------------------------------------------

List operations:
dp = [[0] * 5] * 3			# wrong way of creating 2d list this will create 3 pointers or references to the same list and when u modify one sublist all will get modified
dp = [[0] * 5 for _ in range(3)]	# correct way of creating 2d lists

del(myList[0]) – deletes element 0
len(list)Gives the total length of the list
max(list)Returns item from the list with max value
min(list)Returns item from the list with min value
List methods:
•list.append(obj)-Appends object obj to list
•list.count(obj)-Returns count of how many times obj occurs in list
•list.extend(seq)-Appends the contents of seq to list
•list.index(obj)-Returns the lowest index in list that obj appears
•list.insert(index, obj)-Inserts object obj into list at offset index
•list.pop(obj=list[-1])-Removes and returns last object or obj from list
•list.remove(obj)-Removes object obj from list
•list.reverse()-Reverses objects of list in place

We also have '*' used as 'unpacking operator' as follows:
>>> myList
[1, 2, 3, 4]
>>> print(*myList)
1 2 3 4

>>> otherList
['a', 'b']
>>> myList
[1, 2, 3, 4]
>>> print(*myList, *otherList)
1 2 3 4 a b

The ‘*’ operator can also pack multiple arguments into a Tuple this is what we are using for *args
The’**’ operator can be used to pack Key-Value pairs into a Dictionary this is what we are 
using for **kwargs

range(start, stop, step)
range func starts at start value but continues till stop - 1 and doesnt include stop

-----------------------------------------------------------------------------------------------------------------------------------------

Tuples:
myTuple=(1,2,3,4)
tuples are immutable but can be redefined
tupleNmae.index(obj)

-----------------------------------------------------------------------------------------------------------------------------------------

Sets:
To create and empty set --> tempSet = set()
mySet={1,2,3,4}
• discard(item) - will discard the specified item from the set
• remove(item) - will remove or discard a specified item from the set
• pop() - will return and remove the 1st item in the set
• clear() - will empties the set
• add(item) - will add an element to the set
• update(iterable items) - will add the items specified that can be iterated over to a set
	mySet = {'Hello'}
	mySet.update([1,2,3])
	print(mySet) will give {'Hello', 2, 3, 1}
• len() - length of the set
• max() - largest value in a set
• min() - smallest value in a set
• sum() - sum of a set
• any() - returns True if any item of a set can be evaluated as True
• all() - returns True is all of the items of a set can be evaluated as True
• sorted() - returns a ascending sorted set as a List
• union(set) - returns the union of two sets
• intersection(set) - returns the intersection of two sets
• difference(set) - returns the difference of two sets
• copy() - returns a set copy
• isdisjoint() - returns True is two sets have a null intersection
• issubset(set) - returns True if Object calling method is a subset of specified set

-----------------------------------------------------------------------------------------------------------------------------------------

Dictionaries:
myDict={Key1:Value1,Key2:Value2…}
myDict[Key3]=Value3
• A Key-Value pair can be removed using; del myDict[Key]
• In addition the entire Dictionary can be removed as follows; clear myDict or del myDict
• len(dict) - Returns the length of a Dictionary (# of Key-Value Pairs)
• str(dict) - Creates a String representation of a Dictionary
• list(dict) - Returns a list of the Dictionary keys
• clear() - Removes all items from a Dictionary
• copy() - Returns a copy of a Dictionary
• keys() - Returns the keys of a Dictionary as a view object
• values() - Returns the values of a Dictionary as a view object
• items() - Returns all of the Key-Value pairs of a Dictionary as a view object
newDict={ key:value for (key,value) in myDict.items()} #dictionary comprehension

defaultdict:
# Python program to demonstrate
# defaultdict
  
  
from collections import defaultdict
  
  
# Function to return a default
# values for keys that is not
# present
def def_value():
    return "Not Present"
      
# Defining the dict
d = defaultdict(def_value)
d["a"] = 1
d["b"] = 2
  
print(d["a"])
print(d["b"])
print(d["c"])

Output:
1
2
Not Present

Another example for default dict:
res = defaultdict(list)
this will return an empty list if the key to this dictionary res does not exist.

-----------------------------------------------------------------------------------------------------------------------------------------

FUNCTIONS:
The global key word used with a variable makes it’s scope Global
Default Function Parameters:
def student(firstname, lastname ='Mark', standard ='Fifth'):
     print(firstname, lastname, 'studies in', standard, 'Standard') 
# 1 positional argument
student('John') 
# 3 positional arguments                        
student('John', 'Gates', 'Seventh')     
# 2 positional arguments 
student('John', 'Gates')                 
student('John', 'Seventh')

def student(firstname, lastname ='Mark', standard ='Fifth'):
     print(firstname, lastname, 'studies in', standard, 'Standard') 
# 1 keyword argument
student(firstname ='John')    
# 2 keyword arguments                
student(firstname ='John', standard ='Seventh') 
# 2 keyword arguments
student(lastname ='Gates', firstname ='John') 

Other Function parameters:
Python allows for variable parameters in function argument lists
Two ways of doing this;
• *args - variable length argument without keywords - simply a tuple passed to function
 	This is a positional type argument list provided by a Tuple
	Single ‘*’ indicates this form of variable arguments - name args is convention
• **kwargs - variable length arguments with keywords - simply a dictionary passed to function
	This is a Dictionary type argument list
	Double ‘**’ indicates this form of variable arguments - kwargs is convention
We can iterate over *args or **kwargs to extract the parameter within our function
myFunct(x,*args) or myFunct(x,**kwargs) or myFunct(x,*args, **kwargs)
• Along with all combinations
• Note the orders above
 	Named parameters 1st
	Variable length parameters 2nd
	Keyword variable length arguments 3rd
	This order must be followed

-----------------------------------------------------------------------------------------------------------------------------------------

Arithmetic operators and assignment operators:
*, /, +, -, //(floor division), %
Logical operators:
and, or, not
nor=not(a or b)
nand=not(a and b)
xor=not(( not(not(a) and b) and not(not(b) and a))
Ternary operator:
>>> myString=''
>>> eyes = 'brown' if myString else 'blue'
>>> eyes
‘blue'

-----------------------------------------------------------------------------------------------------------------------------------------

Time in Python:
• Starting point is referred to as the Epoch
• Epoch - Floating point count of seconds since January 1, 1970 Mid Night or 00:00:00
Time in Python is handled using a tuple of 9 items called the TimeTuple provided below;
• Index 0 - 4 digit year (2021)
• Index 1 - 1 digit month (1-12)
• Index 2 - 2 digit day (1-31)
• Index 3 - 2 digit hour (0-23)
• Index 4 - 2 digit minute (0-59)
• Index 5- 2 digit second (0-61, 61-leap seconds)
• Index 6- 1 digit day of week (0-6, 0=monday)
• Index 7 - 3 digit day of year (1-366)
• Index 8 - 1 digit day light savings time (-1=DST)
import time
localTime=(time.localtime(time.time()))
for x in localTime:
print(x)
2021
9
27
10
53
38
0
270
1

import time
localTime=time.asctime( time.localtime(time.time() ))
print(localTime)
Mon Sep 27 11:11:51 2021

clock - returns the current CPU time as a float
• gmtime - accepts ticks and returns the a TimeTuple for Greenwich
Mean Time or UTC
• sleep(seconds) - will suspend the caller for the time specified for
seconds

Calendar in Python:
import calendar
cal=calendar.month(2021,1)
print(cal)
January 2021
Mo Tu We Th Fr Sa Su
1 2 3
4 5 6 7 8 9 10
11 12 13 14 15 16 17
18 19 20 21 22 23 24
25 26 27 28 29 30 31

-----------------------------------------------------------------------------------------------------------------------------------------

Python - Iterators - Example
• Here is an example:
myList=[1,2,3,45,100]
myIter=iter(myList)
print(next(myIter))
print(next(myIter))
print(next(myIter))
print(next(myIter))
print(next(myIter))
print(next(myIter))
1
2
3
45
100
Traceback (most recent call last):
File "io.py", line 8, in <module>
print(next(myIter))
StopIteration
• What happened to throw the exception?
• Note 1st next() provides 1
• Last next() exceeds Object dimensions

-----------------------------------------------------------------------------------------------------------------------------------------

CLASSES:
class Circle:
	def __init__(self, radius):
		self.radius=radius
		self.area=computeArea(self)
	
	def computeArea(self):
		return 3.14*self.r**2

• To Instantiate an object of Class Circle
myCircle=Circle(2)

Python - Student Class
class student:
'''A class representing a student'''
	def __init__(self,n,a):
		self.full_name = n
		self.age = a
	def get_age(self):
		return self.age

Python - Syntax for Access
>>> f = student(“Bob Smith”, 23)
>>> f.full_name # Access attribute
“Bob Smith”
>>> f.get_age() # Access a method
23

Python - Example getattr(object_instance, string)
>>> f = student(“Bob Smith”, 23)
>>> getattr(f, “full_name”)
Bob Smith
>>> getattr(f, “get_age”)
<method get_age of class studentClass at 010B3C2>
>>> getattr(f, “get_age”)() # call it
23
>>> getattr(f, “get_birthday”)
# Raises AttributeError – No method!

Python-Example hasattr(object_instance,string)
>>> f = student(“Bob Smith”, 23)
>>> hasattr(f, “full_name”)
True
>>> hasattr(f, “get_age”)
True
>>> hasattr(f, “get_birthday”)
False

Python - Class Attributes
•Class attributes are defined within a class definition and outside of any method
•Since there is one of these attributes per class and not one per instance, they’re accessed via a different notation:
•Access class attributes using self.__class__.name notation
•This is just one way to do this & the safest in general
class sample: 
	x = 23 
	def increment(self): 
		self.__class__.x += 1 	#24
>>> a = sample()
	>>> a.increment()
>>> a.__class__.x
24

Python - Private Visibility of Data and Methods
• Any attribute/method with two leading under-scores in its name (but none at the end) is
private and can’t be accessed outside of class
• Note: Names with two underscores at the beginning and the end are for built-in methods or
attributes for the class
• Note: There is no ‘protected’ status in Python; so, subclasses would be unable to access these
private data either

Python - Inheritance
class childClass(parentClass):
•In the above for the Class definition the Parent Class name is added within ‘()’
•Note that the Constructor for childClass must call the parentClass Constructor
•The Constructor for childClass now must call super().__init__()
To redefine a method of the parent class, include a new definition with the same name
• The old method won’t get executed
• To execute the method in the parent class in addition to new code for some method, explicitly call
the parent’s version of method
• parentClass.methodName(self,a,b,c)
• The only time you ever explicitly pass ‘self’ as an argument is when calling a method of an ancestor

-----------------------------------------------------------------------------------------------------------------------------------------

FILES:
You can open a file in two ways;
• file = open(‘dog.txt’,’r’) - Requires an explicit close statement
• with open(‘dog.txt’,’r’) as fileObject - An implied close statement will be executed
Modes supported include; ‘r’=read, ‘w’=write, ‘a’=append

We can iterate over a file object that has been opened
with open(‘dog.txt’,’r’) as fileObject:
	for line in fileObject:
		print(line)

We can also read the file into a List line by line as follows
lines=fileObject.readlines()
Once a list is composed we can iterate over the List of lines

Writing to files requires the file to be opened in write mode
with open(‘dog.txt’,’w’) as fileObject:
	fileObject.write(‘Theo’)
Writing to a file will create the file and over write an existing file
• In order to add additional lines then the file must be opened in append mode or ‘a’

The read method will read a specified number of characters
• char=fileObject.read(1)
• Assume fileObject2 is opened in append mode…
• fileObject2.write(char) would write a single char to the file

-----------------------------------------------------------------------------------------------------------------------------------------

Python - JSON
• JSON supports the dump and dumps methods
• The dump method writes Python data to a file
• The dumps method writesPython Strings to a file
with open(‘data.json’,’w’) as fileObject:
json.dump(data,fileObject)
json.dumps(stringData,fileObject)
• JSON can restore data from a file using the load method
• Restored data will follow encoded Python type - Serialize-Deserialize
• Example:
data = json.load(fileObject)

• Here is an example that writes a List to a file using JSON and then reads it back;
import json
myList=[1,2,3,4,5,'Hello']
with open('jsonTest.json','w') as fileObject:
	json.dump(myList,fileObject)
with open('jsonTest.json','r') as fileObject:
	print(f'List from file: {json.load(fileObject)}’)