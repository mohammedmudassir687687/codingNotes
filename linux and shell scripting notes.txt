Command: The command refers to the program run by the user.
Option(s): The option tell the command how to operate. It always starts with "-" character 
and has a single letter.
Argument: The arguments tell the command what to operate on.

$ls -l /var/log
Here ls is command, -l is option and /var/log is argument

Options can be combined with only one ‘-’ sign
ls -lat abc is the same as ls -l -a -t abc

Few general commands:
1. ls - lists the files in a folder
2. man - man stands for manual which gives description about any linux command
example: man ls
3. file - this will return the exact file format
example: file filename
4. stat - command for knowing statistics of a file 
example: stat filename

KERNEL: The kernel is a computer program that is the core of a computers operating system, 
with complete control over everything in the system. It virtualizes the common hardware resources 
of the computer to provide each process with its virtual resources.

SHELL: A shell is a special user program which provides an interface to the user to use 
operating system services. Shell accepts human-readable commands from user and converts 
them into something which kernel can understand. It is a command language interpreter 
that execute commands read from input devices such as keyboards or from files.

SHELL RELATIONSHIP: When you move from one shell to another, UNIX remembers the path you 
followed by creating a parent-child relationship. Your login shell is always the most senior 
shell in the relationship - the parent or grandparent depending on how many shells you have used.

COMMAND PROMPT: its this short message at the start of command line
[sandra@localhost work]~$

Note: The tilde(~) notation is short-cut notation to represent the home directory.


Basic Commands:
1. pwd - The 'pwd' stands for 'Print Working Directory'. It prints the path of the working directory
2. clear - used to clear the terminal

Locating Commands Every command of Linux is stored somewhere in the local machine and when a particular 
command is executed, it gets called from that particular location. The file of every command 
contains the program mainly written in C language. This location of the file can be known using 
the 'type' command in Linux. Here is the Syntax:
$ type Command_name
example: type ls
output: ls is hashed (/bin/ls)
example: type cd
output: cd is a shell builtin
This shows that ls is an external command while cd is an internal command.

Combining Commands
Linux allows you to specify more than one command in the command line.
Each command has to be separated from the other by a ; (semicolon)
ls; pwd

The echo Command: The echo command in Linux is used to display the line of text/string that is 
passed as an argument which can be either single line or multi line as well.
example:
$echo “Line 1
>Line 2
>Line 3”

Linux provides us with 3 types of Users namely,
Root User
System User
Normal User

System User: This user is needed to handle the system accounts. They take care of the 
operations of system-specific components like mail accounts, SSH accounts etc. Example, 
If we install apache, a system user apache will be created.

1. Creating User(s): The 'useradd' is a command in Linux that is used to add user accounts 
to your system.
syntax: useradd [options] name_of_the_user
2. Assigning Password to Users: The 'passwd' command in Linux is used to change the user 
account passwords. The root user reserves the privilege to change the password for any user 
on the system, while a normal user can only change the account password for his or her own account.
syntax: passwd [options] name_of_the_user
3. Creating User(s) with specific UserId: To create a user with specific user-id, we need to 
provide -u as the [options] followed by the user_id and name_of_the_user.
syntax: useradd -u user_id name_of_the_user
4. Creating User(s) with specific UserId and GroupId: To create a user with specific user-id and 
group id, we need to provide -u as the [options] followed by the user_id followed by -g as the 
[options] followed by group_id and name_of_the_user.
syntax: useradd -u user_id -g group_id name_of_the_user
5. Deleting a Existing User: The 'userdel' command in Linux system is used to delete a user account 
and related files.
syntax: userdel name_of_the_user
6. Deleting an Existing User who is still Logged In or active: The 'userdel' command with '-f' 
as the option forces the removal of the specified user account. It doesn’t matter that the user 
is still logged in or out.
syntax: userdel -f name_of_the_logged_in_user


Groups in Linux refer to the user groups. In Linux, there can be many users of a single system, 
(normal user can take uid from 1000 to 60000, and one root user (uid 0) and 999 system users 
(uid 1 to 999)).
1. Creating Groups The 'groupadd' command is used to create a new user group.
Syntax:
groupadd [option] group_name
2. Creating Groups with custom GroupId The 'groupadd' command followed by '-g' as [options] 
can be used to create a new user group with a custom group_id.
Syntax:
groupadd -g group_id group_name
3. Deleting an Existing Group The 'groupdel' command can be used to delete an existing group.
Syntax:
groupdel [option] group_name
4. Changing the name of the Group The 'groupmod' command can be used to rename or change or 
modfiy an existing group. Basically, it modifies a group definition on the system by modifying 
the right entry in the database of the group. It is done using the '-n' as [options]
Syntax:
groupmod -n new_group_name old_group_name
5. Adding multiple users to the group The 'gpasswd' command followed by '-M' as [options] 
can be used to add multiple users to a group.
Syntax:
gpasswd -M User1, User2 Host_Group_Name

IMPORTANT FILES IN LINUX
/etc/group : This File contains the group information for each account.
/etc/gshadow : This File contains secure group account information.

Categories of files:
Ordinary file — Also known as a regular file. It contains only data as a stream of characters.
Directory file — It’s commonly said that a directory contains files and other directories, 
but strictly speaking, it contains their names and a number associated with each name.
Device file — All devices and peripherals are represented by files. To read or write a device, 
you have to perform these operations on its associated file.

.(a single dot) - this represents the current directory.
..(two dots) - this represents the parent directory.


FILE PERMISSIONS:
The concept of file permission is used to regulate the level of interaction with the files. 
In general, there are three types of file permission:
read(r): Here the user is able to read the contents of the file.
write(w): Here the user is able to write or modify a file or directory.
Execute(x): Here the user is able to execute a file or view the contents of a directory.

PERMISSION GROUPS - These are of three types:
Owner(u): A single person who owns the file.
Group(g): The group that the file belongs to.
Others(o): The other users, i.e. everyone else.

chmod Command: This command in Linux allows changing the permissions of a file or directory.
Adding Single Permission: Here execute permission is granted to the group and read permission 
is granted to others.
Syntax: chmod g+x,o+r sample.txt
Adding Multiple Permission: Here write and execute permission is granted to the group.
Syntax: chmod g+wx sample.txt
Removing Permission: Here the write and execute function is revoked.
Synatx: chmod o-wx sample.txt

chmod can also use numeric method for changing the permissions



LINUX DIRECTORY STRUCTURE:
In the FHS, all files and directories appear under the root directory /, even if they are stored 
on different physical or virtual devices.
Most of these directories exist in all UNIX operating systems and are generally used in much 
the same way.

COMMON DIRECTORIES 
1. The '/' or 'Root' Directory. It is the top of the file system hierarchy.
	Every single file and directory starts from the root directory
	Only root user has the right to write under this directory
	/root is root user’s home directory, which is not same as '/'
2. The '/bin' directory contains binaries and other executable programs.
	Contains binary executables
	Common Linux commands you need to use in single-user modes are located under this directory.
3. The '/etc' directory contains the System Configuration files.
	Contains configuration files required by all programs.
4. The '/home' Directory is the users’ home directories, containing saved files, personal settings, etc.
	Home directories for all users to store their personal files.
5. The '/opt' directory contains the optional application software packages. 
It contains 3rd party software packages.
	Contains add-on applications from individual vendors.
6. The '/tmp' directory stores the Temporary files. Often not preserved between system reboots, 
and maybe severely size restricted.
	Directory that contains temporary files created by system and users.
	Files under this directory are deleted when system is rebooted.
7. The '/usr' directory is the Secondary hierarchy for read-only user data. It contains the 
majority of (multi-)user utilities and applications.
8. The '/var' directory contains Variable data and most notably log files.


1. MAKING DIRECTORIES IN LINUX - 'mkdir' Command
The 'mkdir' stands for 'make directory' command is used to create or make Directories. 
The command is followed by the name of the directories to be created.
Syntax:
mkdir directory_name

The 'mkdir' command can be used to create more than one directory.
Syntax:
mkdir directory_name1 directory_name2

The 'mkdir' command can also be used to create a directory tree.
Syntax:
mkdir directory_name1 directory_name1/directory_name2

2. REMOVING DIRECTORIES IN LINUX - 'rmdir' Command
The 'rmdir' or 'Removing Directories' command is used to remove directory.
Syntax:
rmdir directory_name

The rmdir command can be used to remove more than one directory.
Syntax:
rmdir directory_name1 directory_name2




VARIOUS OPTIONS AVAILABLE WITH 'ls' COMMAND 
1. ls -a
Lists all the files (including hidden files)

Hidden files are not displayed by default

Hidden files names begin with a dot

2. ls -l : Lists all the attributes of all files in the current directory.
3. ls -t : The -t option presents the files in the order of their modification time,
the last modified placed first.
4. ls -r : The -r option reverses the order of presentation. The files will then be listed, 
with the names sorted in reverse ASCII order.
5. ls -S : The -S option gives us the biggest file in size first in the output
COMBINING COMMANDS IN LS
You can combine more than one option in ls

Example: 'ls -Sr' which will list the file which is the smallest in size first as we have 
combined the -r option


1. cal : The 'cal' or Calendar command is used to see the calendar of any specific month or a complete year.
Syntax:
cal [ [month] year]
2. date : The date command displays the current date and time.
Working of 'date' command
Various formats of 'date' command:
date +%h : displays month name.
date +%m : displays month number.
date +%d : displays the day of the month.
date +%y : displays last two digits of the year.
date +%H,M : and S displays hour, minute and second, respectively.
date +%D : displays date in mm/dd/yy format.
date +%T : displays time in hh:mm:ss format.
3. echo: The 'echo' command is used to display a line of text or a variable value. It offers no 
formatting option. It is a good command to display a simple output when you know that the 
variable's contents will not cause problems.
4. printf : The 'printf' command format and display data on screen. Use printf to generate 
formatted output. The 'printf' does not provide a new line


The cat command in Linux can be used to:
Create a file

Display contents of a file

Concatenate files

Appending to a file

1. Creating a file in Linux The 'cat' command in Linux is used to create a file.
Syntax:
cat > file_name
Note: Ctrl+D is used as an EOF(end of file) to exit from within the file.
2. Displaying a file
The 'cat' can also be used to display the file.
Syntax:
cat file_name
The 'cat' command can be used to display the content of multiple files at the same time. 
While displaying at the same time, 'cat' concatenates the mentioned files.
Example:
cat abc cde 
files 'abc' and 'cde' will be concatenated.
3. Copying the contents of one file to another file The 'cat' command can be used to copy the contents of one file to another.
Syntax:
$cat [filename-whose-contents-is-to-be-copied] > [destination-filename]
4. Appending to a File We can add more inputs to an existing content of the file using the 'cat' command.
Syntax:
cat >> file_name


Various Options in 'cat' Command

1. 'cat -v' Option The '-v' option displays nonprinting characters. We observe that when we 
try using cat with an executable file a junk of characters are displayed. We can use '-v' option 
to see these characters.

2. 'cat -n' Option The '-n' option displays line numbers with each line.


The cp command can be used for copying a file in Linux.
The cp command copies a file or a group of files.

The syntax requires two filenames to be specified in the command line.

The first file is copied to the second.

Syntax:
cp file1 file2

If there is only one file to be copied, the destination can be either an ordinary file or directory.
Sytanxes:
cp file1 dir1/file2
cp file1 dir1

Can also be used to copy more than one file with a single command. For this case, the last 
argument must be a directory which already exists.
Syntax:
cp file1 file2 file3 dir1

Options of 'cp' Command:

1. 'cp -i' Command The '-i' or interactive option warns the user before overwriting the destination 
file.
2. 'cp -R' Command The '-R' option behaves recursively to copy an entire directory structure.


The 'rm' command deletes or removes one or more files. The command performs silently i.e., it deletes a file without confirming.
Syntax:
rm file1 file2

1. 'rm -i' Command The '-i' option makes the command ask the user for confirmation before removing each file.
2. 'rm -r or -R' command. The '-r' or '-R' performs a recursive search for all subdirectories and files within these subdirectories. At every stage, it deletes everything it finds.
3. 'rm -f' Command The '-f' or force removal removes a file without any prompt even if it is a write-protected file.


The mv command has two functions:
It renames a file or a directory.

It moves a group of files to a different directory.

Syntax:
mv src dest

1. Renaming
It doesn’t create a copy of the file; it merely renames it.

No additional space is consumed on disk during renaming.

2. Moving The 'mv' command can also be used to move files to a directory.

Syntax:
mv src dirname

Options in 'mv' Command

1. '-i' Option: The '-i' makes the mv command ask the user for confirmation before moving or renaming each file.
2. '-f' option: The '-f' or 'Force' option in mv prompts for confirmation overwriting the destination file if a file is write protected.
3. -b(backup): With this option it is easier to take a backup of an existing file that will be overwritten as a result of the mv command.


'wc' Command in Linux


The 'wc' is used to count words, lines and characters in a file.

By default, 'wc' displays a four columnar output in which the first column displays the number of lines, the second column displays the number of words, 
the third column displays the number of characters and the last column displays the file name.
Working of 'wc' command

A line is any group of characters not containing a newline.


A word is a group of characters not containing a space, tab or newline.


A character is the smallest unit of information and includes a space, tab and newline.

Options in 'wc' Command

'wc -l' option counts only the number of lines in a file.

'wc -w' option counts only the number of words in a file.

'wc -c' option counts only the number of characters in a file.
Using multiple filenames in wc The 'wc', when used with multiple filenames, gives the count of lines, words and characters in each file on a separate file and also gives the total count.



Comparing Two Files using 'cmp' Command

cmp(compare) command needs two filenames as arguments.

The two files are compared byte by byte, and the location of the first mismatch is echoed to the screen.

If two files are identical, cmp displays no message, but simply returns the prompt.

Use of 'comm' command as Common

It requires two sorted files, and lists the differing entries in different columns.

When you run comm, it displays a three-columnar output.

The first column contains lines unique to the first file, and the second column shows lines unique to the second file.The third column displays lines common to both files.


Options of 'comm' Command

These commands require single-column output from comm, and comm can produce it using the options -1, -2 or -3

To drop a particular column, simply use its column number as an option prefix.

Display File Differences

Unlike its fellow members, cmp and comm, it also tells you which lines in one file have to be changed to make the two files identical.
a : add
c : change
d : delete

Each instruction uses an address combined with an action that is applied to the first file





Piping in Linux

A pipe is a form of redirection (transfer of standard output to some other destination) that is used in Linux and other Unix-like operating systems to send the output 
of one command/program/process to another command/program/process for further processing.
Syntax:
command_1 | command_2 | command_3 | .... | command_N 

Example: Listing all files and directories and give it as input to more command:
$ ls -l | more 
Output of ls acts as input to wc

This command gives us the number of files in the directory in which we are.

Multiple commands can be connected in this way forming a ‘pipeline’



tee Command in Linux

tee command reads the standard input and writes it to both the standard output and one or more files. The command is named after the T-splitter used in plumbing. 
It basically breaks the output of a program so that it can be both displayed and saved in a file. It does both the tasks simultaneously, copies the result into the 
specified files or variables and also displays the result.
An external command which is not a feature of the shell

Handles character stream by duplicating its input

It saves one copy in a file and writes the other to standard output

Syntax:
tee [OPTION]... [FILE]...
Example
ls | tee list



The cut command in Linux is a command for cutting out the sections from each line of files and writing the result to standard output. It can be used to cut parts of a line 
by byte position, character and field. Basically the cut command slices a line and extracts the text. It is necessary to specify option with command otherwise it gives an error. 
If more than one file name is provided then data from each file is not preceded by its file name.
Syntax:
cut OPTION... [FILE]...
Options and their Description with Examples

1. 'cut -b' Command
To extract the specific bytes, you need to follow -b option with the list of byte numbers separated by comma. Range of bytes can also be specified using the hyphen(-). 
It is necessary to specify list of byte numbers otherwise it gives error. Tabs and backspaces are treated like as a character of 1 byte.

2. 'cut -c' Command To cut by character use the -c option. This selects the characters given to the -c option. This can be a list of numbers separated comma or a range of numbers 
separated by hyphen(-). Tabs and backspaces are treated as a character. It is necessary to specify list of character numbers otherwise it gives error with this option.

Syntax:
$cut -c [(k)-(n)/(k),(n)/(n)] filename

3. 'cut -f' Command The -c option is useful for fixed-length lines. Most UNIX files don’t have fixed-length lines. To extract the useful information you need to cut by fields 
rather than columns. List of the number of the field specified must be separated by a comma. Ranges are not described with -f option. cut uses tab as a default field delimiter 
but can also work with another delimiter by using -d option.
Note: Space is not considered as delimiter in UNIX.
Syntax:
$cut -d "delimiter" -f (field number) file.txt

4. Using cut with pipeline(|) In the following example output of the ls -l command acts as input to cut command and we get only the first field of ls -l command.
$ ls -l | cut -d ' ' -f 1



The 'sort' command is used to sort a file, arranging the records in a particular order. By default, the sort command sorts file assuming the contents are ASCII. 
Using options in sort command, it can also be used to sort numericall
$ sort filename.txt
Options in sort Command

1. sort '-r' Option: You can perform a reverse-order sort using the -r flag. The -r flag is an option of the sort command which sorts the input file in reverse order 
i.e. descending order by default.
Syntax :
$ sort -r inputfile.txt
2. sort '-n' Option : To sort a file numerically use –n option. -n option is also predefined in unix as the above options are. This option is used to sort the file with 
numeric data present inside.
3. sort '-nr' option : To sort a file with numeric data in reverse order we can use the combination of two options as stated below.
Syntax :
$ sort -nr filename.txt
4. sort '-k' Option: Unix provides the feature of sorting a table on the basis of any column number by using -k option. Use the -k option to sort on a certain column. 
For example, use “-k 2” to sort on the second column.
Syntax :
$ sort -k filename.txt
5. sort '-t' Option: This command followed by the delimiter in quotes, overrides the default.
6. 'sort -c' Option: This option is used to check if the file given is already sorted or not & checks if a file is already sorted pass the -c option to sort. 
This will write to standard output if there are lines that are out of order. The sort tool can be used to understand if this file is sorted and which lines are out of order






Shell Scripting

Usually shells are interactive that mean, they accept command as input from users and execute them. However some time we want to execute a bunch of commands routinely, 
so we have type in all commands each time in terminal.
As shell can also take commands as input from file we can write these commands in a file and can execute them in shell to avoid this repetitive work. These files are called 
Shell Scripts or Shell Programs. Shell scripts are similar to the batch file in MS-DOS. Each shell script is saved with .sh file extension eg. myscript.sh

Time Command in Bash

The Bash has builtin time command to report how much time a process consumed. The 'time' command in Linux is used to execute a command and prints a summary of real-time, 
user CPU time and system CPU time spent by executing a command when it terminates. 
'real' time is the time elapsed wall clock time taken by a command to get executed, while 'user' and 'sys' time are the number of CPU seconds that command uses in user 
and kernel mode respectively.
Syntax:
time [option] [COMMAND]
example: time sleep 3



Variables in Bash

Variables are used to to store values in Linux. Variables in bash are given a value with '='. You should put no spaces before or after the =, If the value has special characters, 
including spaces, put the value in quotes.
Example:
myvar = "this is some chars; *$\"

Created when you assign one a value or declare, for example, the export command.

Remove variables with the unset command.

Reference the value of a variable with a dollar sign in front of the name. Example, echo myvar is $myvar

For a shell scripts to get a copy of a shell variable , it needs to be "exported" .

export mynewvar or declare -x mynewvar.

You can export and assign in the same statement. For example:
export var2="var2 value"

export -f myfunc will export the function myfunc.


Grouping in bash Bash functions use braces and can modify variable of the shell that calls the function.
example: 
a=1
(
a=2
)
echo $a
# Prints 1

a=1
{
a=2
}
echo $a
# Prints 2


The 'source' command is a shell built-in command which is used to read and execute the content of a file(generally set of commands), passed as an argument in the current shell 
script. The command after taking the content of the specified files passes it to the TCL interpreter as a text script which then gets executed. If any arguments are supplied, 
they become the positional parameters when filename is executed. Otherwise, the positional parameters remain unchanged. The entries in $PATH are used to find the directory 
containing FILENAME, however, if the file is not present in $PATH it will search the file in the current directory. The source command has no option and the argument is the file only.

Syntax:
source FILENAME [arguments]

Sourcing is a common way to import variable assignments or functions.

The sourced script is executed within the calling shell's process.

Example: To pass gfg.txt as an argument which is stored in the home directory and contain list of command i.e. ls, date and time. Each command enlisted in the file will be executed 
line by line.


The 'alias' command instructs the shell to replace one string with another string while executing the commands. When we often have to use a single big command multiple times, 
in those cases, we create something called an alias for that command. Alias is like a shortcut command which will have same functionality as if we are writing the whole command.
Syntax:
alias [-p] [name[=value] ... ]

Examples:
alias copy = cp
alias rn = mv


alias mroe = more
mroe myfile
ls -l | mroe

Creating an Unalias: Removing an existing alias is known as unaliasing.
unalias [alias name]


Options in 'echo' 
1. '-n' Option: This option is used to omit echoing trailing newline.
2. '-e' Option: This enables the interpretation of backslash escapes.

3. '-E' Option: This disable backslash escaped characters in case they were enabled by default.

4. echo * would show file and directory names.
5. Use file redirection techniques to send the output to other files, such as stderr.



Local Variables can be created in a function that will not be available outside of it. The typeset command makes variable local, can provide a type or can provide formatting.
Arithmetic is faster for variables defined to be integers.

Let allows for convenient arithmetic operations:
let x++; let y=x**2; let x=x*3 .................


declare Command

The declare is a builtin command of the bash shell. It is used to declare shell variables and functions, set their attributes and display their values.
Syntax:
declare [-a] [-f] [-g] [-F] [-x] [-p] [name[=value]] [name[=value]] …


Options in declare Command:
declare -l uppercase values in the variable are converted to lowercase.

declare -u lowercase values in the variable are converted to uppercase.

declare -r variable is made read only.

declare -a MyArray will make MyArray an indexed array. 

declare -A MyArray2 will make MyArray2 an associative array.



The 'read' command in Linux system is used to read from a file descriptor. Basically, this command read the total number of bytes from the specified file descriptor into 
the buffer. If the number or count is zero then this command may detect the errors. But on success, it returns the number of bytes read. Zero indicates the end of the file. 
If some errors found then it returns -1.
Read a line into variable or multiple variables.

read a b reads first word into a and rest into b.




WHILE IN LINUX
Syntax:
while COMMANDS; do COMMANDS; done


a=0 
# -lt is less than operator 
  
#Iterate the loop until a less than 10 
while [ $a -lt 10 ] 
do 
    # Print the values 
    echo $a
      
    # increment the value 
    a=`expr $a + 1` 
done 



for Command in Linux

for command in Linux is used to repeatedly execute a set of command for every element present in the list.

Syntax:
for NAME [in WORDS ... ] ; do COMMANDS; done
Implementation: 1. The 'seq' command in Linux is used to generate numbers from FIRST to LAST in steps of INCREMENT. 
It is a very useful command where we had to generate a list of numbers in while, for, until loop.


case Command in Linux

case command in Linux is the best alternative when we had to use multiple if/elif on a single variable. It is used to execute the commands based on the pattern matching.

Syntax:
case WORD in [PATTERN [| PATTERN]...) COMMANDS ;;]... esac



Conditional Statements

1. if statement This block will process if specified condition is true.
Syntax:
if [ expression ]
then
   statement
fi

2. if-else statement If specified condition is not true in if part then else part will be execute.
Syntax:
if [ expression ]
then
   statement1
else
   statement2
fi



File Test Operator These operators are used to test a particular property of a file.
-b operator : This operator check weather a file is a block special file or not. It returns true, if the file is a block special file otherwise false.

-c operator : This operator checks weather a file is a character special file or not. It returns true if it is a character special file otherwise false.

-d operator : This operator checks if the given directory exists or not. If it exits then operators returns true otherwise false.

-e operator : This operator checks weather the given file exits or not. If it exits this operator returns true otherwise false.

-r operator : This operator checks weather the given file has read access or not. If it has read access then it returns true otherwise false.

-w operator : This operator check weather the given file has write access or not. If it has write then it returns true otherwise false.

-x operator : This operator check weather the given file has execute access or not. If it has execute access then it returns true otherwise false.

-s operator : This operator checks the size of the given file. If the size of given file is greater than 0 then it returns true otherwise it false.





Filters in Linux

In UNIX/Linux, filters are the set of commands that take input from standard input stream i.e. stdin, perform some operations and write output to standard output stream i.e. stdout. 
The stdin and stdout can be managed as per preferences using redirection and pipes. Common filter commands are - grep, more, sort.
Filters can be used in pipes.

Filters provide the powerful means of combining the input and output of a sequence of commands to get the kind of report you want.

head Command

It displays the first n lines of the specified text files. If the number of lines is not specified then by default prints first 10 lines.
Syntax:
head [-number_of_lines_to_print] [path]

tail Command

It works the same way as head, just in reverse order. The only difference in tail is, it returns the lines from bottom to up.
Syntax:
tail [-number_of_lines_to_print] [path]




ZIP IN LINUX
$zip myfile.zip filename.txt
$unzip myfile.zip 

 1. zip '-u' Option: This updates the file in the zip archive. 
$zip –u filename.zip file.txt

2. zip '-d' Option: Removes the file from the zip archive.
$zip –d filename.zip file.txt



tar in Linux

The Linux ‘tar’ stands for tape archive, is used to create Archive and extract the Archive files.

Syntax: tar [options] [archive-file] [file or directory to be archived]

EXTRACTING TAR ARCHIVE
x : Extract tar files.
v : Verbosely show the .tar file progress
f : Create archives with





WILDCARDS AND REGEX IN LINUX
Linux provides us with 3 types of Wildcards:
Star Wildcard ( * ) : The character '*' matches zero or more characters in the file or directory name.

Question Wildcard ( ? ) : The character '?' can represent any single character.

Sqaure Bracket Wildcard ( [] ) : This is used to specify range. It allows you to limit to a subset of characters.



Here are the two important files stored in the Linux Machine:
/etc/resolv.conf: It is the file keeps the address of DNS server to which the clients will be accessing to resolve IP to hostname and hostname to IP.

/etc/hosts : It is the file which is responsible for resolving the hostname into IP locally, in other word it acts as local DNS, if DNS server is not accessible.




ifconfig Command in Linux

ifconfig(interface configuration) command is used to configure the kernel-resident network interfaces
Syntax:
ifconfig [...OPTIONS] [INTERFACE]

Options in ifconfig command: 
1. ifconfig '-s' Option: Display a short list, instead of details.
Syntax:
ifconfig -s

2. ifconfig -a Option: This option is used to display all the interfaces available, even if they are down.
Syntax:
ifconfig -a

3. ifconfig 'eth0' Option: It views the network settings of a specific interface.



ping Command in Linux

PING (Packet Internet Groper) command is used to check the network connectivity between host and server/host. This command takes as input the IP address or the URL 
and sends a data packet to the specified address with the message “PING” and get a response from the server/host this time is recorded which is called latency. Fast ping low 
latency means faster connection. Ping uses ICMP(Internet Control Message Protocol) to send an ICMP echo message to the specified host if that host is available then it sends 
ICMP reply message. Ping is generally measured in millisecond every modern operating system has this ping pre-installed.
ping www.geeksforgeeks.org


The 'traceroute' command in Linux prints the route that a packet takes to reach the host.
traceroute google.com


dig Command in Linux

dig command stands for Domain Information Groper. It is used for retrieving information about DNS name servers. It is basically used by network administrators. 
It is used for verifying and troubleshooting DNS problems and to perform DNS lookups.
dig geeksforgeeks.org



nslookup Command in Linux

The nslookup (stands for “Name Server Lookup”) is a useful command for getting information from DNS server. It is a network administration tool for querying the 
Domain Name System (DNS) to obtain domain name or IP address mapping or any other specific DNS record.
nslookup google.com



One Time Job Schedule

The 'at' command is used to schedule a job for a particular time or interval, and can not be used for a recurring task. The 'at' command is useful for taking 
one-time backup, sending email as a reminder at a specified time, executing a script at specified time.
Syntax:
at [OPTION...] runtime

Working with at command 
1. Command to list the user’s pending jobs:
at -l
or
atq

2. Schedule a job for the coming Monday at a time twenty minutes later than the current time:
at Monday +20 minutes

3. Schedule a job to run at 1:45 Aug 12 2020:
at 1:45 081220

4. Schedule a job to run at 3pm four days from now:
at 3pm + 4 days

5. Schedule a job to shutdown the system at 4:30 today:
# echo "shutdown -h now" | at -m 4:30

6. Schedule a job to run five hour from now:
at now +5 hours

7. at -r or atrm command is used to deletes job , here used to deletes job 11 .
at -r 11
or
atrm 11




Recurring Schedule

In Linux operating system, it is possible to create a schedule for commands or script files to be executed automatically within a specified time period or specific date. 
Linux comes with the automated task utility ‘cron’. The cron daemon on Linux runs jobs in the background  at specific times. The cron is a software utility, offered by 
Linux-like operating system which automates the scheduled task at a predetermined time. It is a daemon process, which runs as a background process and performs the 
specified operations at the predefined time when a certain event or condition is triggered without the intervention of a user. To deal with a repeated task frequently 
is an intimidating task for the system administrator and thus he can schedule such processes to run automatically in the background at regular interval of time by 
creating a list of those commands using cron.

'crontab' in Linux: The crontab is a list of commands that you want to run on a regular schedule, and also the name of the command used to manage that list. 
Crontab stands for “cron table, ” because it uses the job scheduler cron to execute tasks.


Linux Crontab Format
MIN HOUR DOM MON DOW CMD

example:
30 08 10 06 * /home/maverick/full-backup
30 – 30th Minute
08 – 08 AM
10 – 10th Day
06 – 6th Month (June)
* – Every day of the week

1.To view the Crontab entries View Current Logged-In User’s Crontab entries : To view your crontab entries type crontab -l from your unix account.
2.To edit Crontab Entries Edit Current Logged-In User’s Crontab entries.To edit a crontab entries, use crontab -e. By default this will edit the current logged-in users crontab.
3.To delete Crontab Entries We use crontab -r to delete crontab entries.



ps Command

Linux provides us a utility called ps for viewing information related with the processes on a system which stands as abbreviation for “Process Status”.
ps (Process status) can be used to see/list all the running processes.


Fields described by ps are described as:
UID: User ID that this process belongs to (the person running it)

PID: Process ID

PPID: Parent process ID (the ID of the process that started it)

C: CPU utilization of process

STIME: Process start time

TTY: Terminal type associated with the process

TIME: CPU time taken by the process

CMD: The command that started this process

Options in PS Command:
1. ps -T Option: View all processes associated with Terminal (-T option).

2. ps -r Option: View all the process running(-r option).

3. ps -C dhclient: View all the Process by command name ( -C option)

View Process with the selected process ID (-p or pid option)



KILL PROCESS Kill Process:
kill Example – Kill the process using Process ID and Kill Signal (KILLSIG - 9)
killall Example – Kill the process using Process Name and Kill Signal (KILLSIG - 9)

